Rapport détaillé sur le projet de visualisation des données de retard aérien
Introduction
============

Dans le secteur aérien, la gestion et l’analyse des retards de vols représentent un enjeu majeur pour les compagnies, les gestionnaires d’aéroports et les autorités de régulation. Les retards impactent la satisfaction client, la ponctualité, la planification des ressources et la performance globale de l’entreprise. Disposer d’un outil fiable, rapide et interactif pour explorer les causes de retard, identifier les tendances et produire des rapports précis est donc essentiel pour piloter l’amélioration continue et répondre aux exigences réglementaires.

Ce projet répond à ce besoin en proposant une application web interactive développée en Python, s’appuyant sur les bibliothèques Dash, Polars et Plotly. Il permet l’analyse et la visualisation avancée des retards de vols à partir de fichiers Excel structurés, souvent issus des systèmes d’information opérationnels des compagnies aériennes. L’objectif est d’offrir aux utilisateurs (analystes, opérationnels, responsables qualité, managers) un outil ergonomique, rapide et fiable pour explorer les causes de retard, les répartitions temporelles, les performances par flotte, code, aéroport, et pour extraire des statistiques précises sur les retards.

Le projet s’articule autour de plusieurs modules principaux, chacun ayant un rôle bien défini dans la chaîne de traitement et de visualisation des données. L’ensemble du code est organisé pour garantir la maintenabilité, la clarté et la performance, tout en restant accessible à des utilisateurs non-développeurs via une interface web conviviale. Cette architecture modulaire permet également d’envisager des évolutions futures (ajout de nouvelles sources de données, extension des analyses, adaptation à d’autres contextes métiers).

Le contexte d’utilisation typique est celui d’une cellule qualité ou d’un département opérations d’une compagnie aérienne, qui souhaite :
- Suivre l’évolution des retards sur différentes périodes (hebdomadaire, mensuelle, saisonnière)
- Identifier les codes de retard les plus fréquents et les aéroports les plus concernés
- Produire des rapports personnalisés pour la direction ou les autorités
- Réagir rapidement à une dégradation de la ponctualité ou à l’apparition de nouveaux motifs de retard

Ce rapport détaille l’ensemble des fonctionnalités, l’architecture technique, les flux de données, les points forts, les limites et les perspectives d’évolution du projet.
1. Présentation générale
------------------------

Objectifs détaillés du projet :
-----------------------------
Le projet vise à répondre à plusieurs besoins métiers et techniques :

1. Automatiser l’import, le traitement et l’analyse de grands volumes de données de vols, tout en assurant la cohérence et la qualité des données. Cela permet de gagner du temps, d’éviter les erreurs manuelles et d’assurer la reproductibilité des analyses.
2. Permettre une exploration rapide et flexible des données grâce à une interface web moderne, avec des filtres dynamiques et des visualisations interactives. L’utilisateur peut ainsi explorer différentes dimensions (flotte, code, période, aéroport) sans avoir à manipuler directement les fichiers sources.
3. Faciliter la prise de décision et l’identification des axes d’amélioration opérationnelle, en mettant en avant les codes de retard les plus fréquents, les aéroports les plus concernés, et les tendances temporelles. Les résultats sont présentés de façon claire, synthétique et exportable pour alimenter des rapports ou des présentations.
4. Offrir une base technique solide, modulaire et évolutive, permettant d’ajouter facilement de nouvelles fonctionnalités ou de s’adapter à d’autres contextes (autres compagnies, autres types de données).

Contexte d’utilisation :
----------------------
Le projet s’adresse principalement aux :
- Analystes qualité et performance opérationnelle
- Responsables d’exploitation
- Chefs de projet data ou IT
- Toute personne ayant besoin d’explorer, de synthétiser et de présenter des données de retard aérien

Exemple de cas d’usage :
-----------------------
Un responsable qualité souhaite préparer un rapport mensuel sur les retards pour la direction. Il utilise l’application pour :
- Sélectionner la période du mois écoulé
- Filtrer sur la flotte concernée (ex : A320)
- Identifier les codes de retard les plus fréquents
- Exporter le tableau de synthèse et le graphique pour les intégrer dans sa présentation

L’application lui permet de réaliser cette tâche en quelques minutes, sans manipulation manuelle des fichiers Excel.

2. Fonctionnalités principales
------------------------------

Description détaillée des fonctionnalités :
------------------------------------------

1. Chargement et surveillance des données
   - L’application charge automatiquement un fichier Excel contenant les données de vols. Le chemin de ce fichier est configurable dans un fichier TOML, ce qui permet de l’adapter facilement à différents environnements ou exports.
   - Un mécanisme de surveillance (basé sur un intervalle Dash) vérifie régulièrement la date de modification du fichier source. Si le fichier est modifié (par exemple, un nouvel export de données), l’application recharge automatiquement les données, garantissant ainsi que l’utilisateur travaille toujours sur la version la plus à jour.
   - Exemple : un analyste met à jour le fichier Excel chaque lundi matin. L’application détecte la modification et recharge les données sans intervention manuelle.

2. Prétraitement et normalisation
   - Les colonnes du fichier Excel sont systématiquement normalisées : passage en majuscules, suppression des espaces, renommage pour garantir la cohérence (ex : « dep_day_sched » devient « DEP_DAY_SCHED »).
   - Les types de données sont explicitement convertis : les dates sont transformées en objets date, les heures en objets time, les codes en entiers, etc. Cela évite les erreurs lors des groupements, tris ou agrégations.
   - Une colonne de date de départ (`DEP_DATE`) est créée à partir de la date et de l’heure planifiées, facilitant les analyses temporelles.
   - Exemple : si la colonne « DEP_DAY_SCHED » contient des chaînes de caractères, elle est convertie en type date pour permettre les filtres et les groupements par jour.

3. Filtres dynamiques
   - L’utilisateur peut filtrer les données selon plusieurs axes :
       • Flotte (`AC_SUBTYPE`) : type d’avion (ex : A320, B737)
       • Matricule (`AC_REGISTRATION`) : immatriculation de l’avion
       • Code de retard (`CODE_DR`) : un ou plusieurs codes
       • Période temporelle : dates de début et de fin
   - Les listes de valeurs disponibles pour chaque filtre sont générées dynamiquement à partir des données chargées, ce qui évite les erreurs de saisie et garantit la pertinence des choix proposés.
   - Exemple : si seules les flottes A320 et B737 sont présentes dans le fichier, seules ces options apparaîtront dans le filtre.

4. Segmentation temporelle personnalisable
   - L’utilisateur peut segmenter la période d’analyse en intervalles réguliers (par exemple, tous les 7 jours, 14 jours, etc.), ce qui permet d’observer l’évolution des retards dans le temps.
   - Le nombre de segments possibles est calculé automatiquement en fonction de la période sélectionnée. L’utilisateur peut choisir la granularité la plus pertinente pour son analyse.
   - Exemple : pour une période de 30 jours, il peut choisir une segmentation par semaine (4 segments) ou par quinzaine (2 segments).

5. Tableaux de synthèse
   - Un tableau interactif affiche, pour chaque code de retard, le nombre d’occurrences, la description, la liste des aéroports concernés (avec le nombre d’occurrences par aéroport), et le nombre d’aéroports distincts.
   - Ce tableau est filtrable (par code, par aéroport), triable (par nombre d’occurrences, par code, etc.), et exportable au format CSV pour une analyse complémentaire dans Excel ou d’autres outils.
   - Exemple : l’utilisateur trie le tableau pour afficher en premier les codes de retard les plus fréquents.

6. Graphiques interactifs
   - Un graphique en barres affiche l’évolution temporelle des codes de retard sélectionnés, en pourcentage du total des retards sur chaque période.
   - Les couleurs sont attribuées dynamiquement à chaque code pour faciliter la lecture et la comparaison.
   - Les barres affichent à la fois le nombre d’occurrences et le pourcentage relatif, avec des info-bulles détaillées (code, période, nombre, pourcentage).
   - Exemple : l’utilisateur sélectionne deux codes de retard et visualise leur évolution sur 6 semaines.

7. Statistiques clés
   - Le nombre de codes uniques présents dans la sélection courante.
   - Le nombre total de retards sur la période et la sélection courante.
   - Le top 5 des codes de retard les plus fréquents, pour cibler les actions correctives.
   - Exemple : l’application affiche « 12 codes uniques, 350 retards, top code : 41 (Problème technique) ».

8. Export des résultats
   - Les tableaux de synthèse peuvent être exportés au format CSV pour une analyse complémentaire dans Excel ou d’autres outils de reporting.
   - Exemple : l’analyste exporte le tableau pour l’intégrer dans un rapport PowerPoint.

9. Interface responsive
   - L’application utilise Dash Bootstrap Components pour garantir une interface moderne, claire et adaptée à tous les écrans (desktop, tablette, mobile).
   - Les composants s’adaptent automatiquement à la taille de l’écran, assurant une expérience utilisateur optimale.

10. Surveillance automatique du fichier source
    - Un intervalle Dash vérifie régulièrement la date de modification du fichier Excel et recharge les données si nécessaire, assurant ainsi que l’utilisateur travaille toujours sur des données à jour.
    - Exemple : si le fichier est mis à jour à 10h, l’application recharge les données à 10h01 sans intervention.

**Tableaux de synthèse**
- Un tableau interactif affiche, pour chaque code de retard, le nombre d'occurrences, la description, la liste des aéroports concernés (avec le nombre d'occurrences par aéroport), et le nombre d'aéroports distincts.
- Ce tableau est filtrable, triable, et exportable au format CSV.

**Graphiques interactifs**
- Un graphique en barres affiche l'évolution temporelle des codes de retard sélectionnés, en pourcentage du total des retards sur chaque période.
- Les couleurs sont attribuées dynamiquement à chaque code pour faciliter la lecture.
- Les barres affichent à la fois le nombre d'occurrences et le pourcentage relatif, avec des info-bulles détaillées.

**Statistiques clés**
- Le nombre de codes uniques présents dans la sélection.
- Le nombre total de retards sur la période et la sélection courante.
- Le top 5 des codes de retard les plus fréquents.

**Export des résultats**
- Les tableaux de synthèse peuvent être exportés au format CSV pour une analyse complémentaire dans Excel ou d'autres outils.

**Interface responsive**
- L'application utilise Dash Bootstrap Components pour garantir une interface moderne, claire et adaptée à tous les écrans (desktop, tablette, mobile).

**Surveillance automatique du fichier source**
- Un intervalle Dash vérifie régulièrement la date de modification du fichier Excel et recharge les données si nécessaire, assurant ainsi que l'utilisateur travaille toujours sur des données à jour.

3. Architecture technique
-------------------------

Structure des dossiers et des pages du projet
---------------------------------------------
Le projet est organisé de façon modulaire, chaque dossier et fichier ayant un rôle précis dans la chaîne de traitement, d’analyse et de visualisation. Voici une description détaillée des principaux dossiers et fichiers :

1. Racine du projet
   - `main.py` : point d’entrée principal de l’application Dash. Il importe les layouts/pages et lance le serveur Dash.
   - `config.py` : gère la configuration globale du projet (lecture/écriture du fichier TOML, gestion des chemins, options de rafraîchissement, etc.).
   - `config.toml` : fichier de configuration au format TOML, où sont stockés les chemins des fichiers de données, les options d’auto-refresh, etc.
   - `pyproject.toml`, `poetry.lock` : fichiers de gestion des dépendances Python (via Poetry).

2. Dossier `dashboard/`
   - Contient la logique métier, les modules de gestion des données, et les pages de l’application.
   - `excel_manager.py` : module central pour la gestion des données Excel. Il s’occupe de :
       • Charger le fichier Excel (par défaut `Book1.xlsx`)
       • Normaliser et typer les colonnes
       • Filtrer les lignes pertinentes (codes TEC, retards non nuls)
       • Surveiller la modification du fichier source (auto-refresh)
       • Fournir des fonctions utilitaires pour accéder aux données filtrées, compter les occurrences, etc.
   - `server_instance.py` : gère l’initialisation et la récupération de l’instance Dash partagée entre les différentes pages/modules.
   - Dossier `assets/` : contient les fichiers statiques (ex : feuilles de style CSS comme `hover.css`) pour personnaliser l’apparence de l’application.

3. Dossier `dashboard/pages/`
   - Ce dossier regroupe toutes les pages thématiques de l’application, chacune étant dédiée à un axe d’analyse ou à une fonctionnalité spécifique. Chaque sous-dossier ou fichier correspond à une page ou un composant.

   - `Components/components.py` : contient des composants réutilisables (widgets, layouts, etc.) utilisés dans plusieurs pages.

   - `home/page.py` : page d’accueil ou de présentation générale de l’application (si implémentée), avec éventuellement un résumé des données ou des liens vers les autres pages.

   - `tech/page.py` : page principale d’analyse des codes de retard techniques (TEC). C’est la page la plus complète, qui propose :
       • Les filtres dynamiques (flotte, matricule, code, période, segmentation)
       • Le tableau de synthèse des codes de retard (avec description, aéroports, occurrences)
       • Le graphique d’évolution temporelle des codes
       • Les statistiques globales (nombre de codes, total de retards, top 5, etc.)
       • L’export CSV
       • Toute la logique métier associée (callbacks Dash, gestion des interactions)

   - `performance_metrics/page.py` : page dédiée aux indicateurs de performance avancés. Elle permet d’analyser :
       • Le pourcentage de vols non retardés
       • Le pourcentage de retards supérieurs à 15 minutes
       • Le détail des retards par code (ex : 41, 42)
       • Des graphiques spécifiques à ces indicateurs (barres, évolution temporelle)
       • Des cartes ou widgets de synthèse (cards Dash Bootstrap)

   - `temporal/page.py` : page dédiée à l’analyse temporelle fine (par exemple, évolution des retards sur différentes périodes, comparaisons entre périodes, etc.).

   - `weekly/page.py` : page spécialisée dans l’analyse hebdomadaire des retards (par semaine, comparaison entre semaines, etc.).

   - `settings/page.py` : page de configuration avancée, permettant à l’utilisateur de modifier certains paramètres de l’application (chemin du fichier Excel, options d’auto-refresh, etc.).

   - `verify/page.py` : page de vérification ou de contrôle qualité, permettant de s’assurer que les données sont bien conformes, de détecter d’éventuelles anomalies ou incohérences dans les fichiers sources.

   - `performance_metrics/page.py`, `temporal/page.py`, `weekly/page.py`, `settings/page.py`, `verify/page.py` : chaque page est structurée autour d’un layout Dash, de callbacks pour la gestion des interactions, et de fonctions utilitaires pour le traitement des données spécifiques à la thématique.

4. Dossier `src-tauri/` (si présent)
   - Contient des fichiers liés à l’intégration ou au packaging de l’application (ex : pour une version desktop via Tauri).

Résumé pédagogique :
-------------------
Chaque page ou module du projet a un rôle précis :
- Les modules de la racine gèrent la configuration et le lancement global de l’application
- Le dossier `dashboard/` centralise la gestion des données et l’initialisation de l’application
- Le dossier `dashboard/pages/` propose différentes pages d’analyse, chacune adaptée à un besoin métier (analyse technique, performance, temporalité, configuration, etc.)
- Les composants réutilisables sont regroupés dans `Components/`
- Les fichiers statiques (CSS) sont dans `assets/`

Cette organisation permet de maintenir un code clair, évolutif, et de faciliter la collaboration entre plusieurs développeurs ou analystes.

**Backend (traitement des données)**
- Python 3.10+ : langage principal du projet.
- Polars : bibliothèque de traitement de données tabulaires, utilisée pour sa rapidité et sa capacité à gérer de grands volumes de données. Les opérations sont réalisées en mode lazy (évaluation paresseuse) pour optimiser les performances.
- Fichiers de configuration TOML : permettent de stocker les chemins des fichiers, les options de rafraîchissement, etc.
- Modules principaux :
    - `dashboard/excel_manager.py` :
        - Charge le fichier Excel, effectue le prétraitement (typage, normalisation), filtre les lignes pertinentes (codes TEC, retards non nuls).
        - Surveille la modification du fichier source et recharge les données si besoin.
        - Fournit des fonctions utilitaires pour accéder aux données filtrées, compter les occurrences, etc.
    - `config.py` :
        - Centralise la gestion de la configuration (lecture/écriture du fichier TOML, récupération des chemins, etc.).

**Frontend (interface utilisateur)**
- Dash : framework web Python pour la création d’interfaces interactives, basé sur Flask.
- Dash Bootstrap Components : bibliothèque de composants UI pour un rendu moderne et responsive.
- Dash Table : composant pour l’affichage performant de grands tableaux de données, avec tri, filtre, export CSV.
- Callbacks Dash : liaisons dynamiques entre les entrées utilisateur (filtres, boutons) et les sorties (tableaux, graphiques, statistiques).

**Visualisation**
- Plotly : génération de graphiques interactifs (barres, courbes, etc.), personnalisation avancée (couleurs, info-bulles, légendes, etc.).

**Organisation modulaire**
- `dashboard/pages/tech/page.py` :
    - Contient la logique métier principale, la gestion des filtres, la segmentation temporelle, la génération des tableaux et graphiques, et la définition du layout de la page principale.
- `dashboard/pages/performance_metrics/page.py` :
    - Calcule des indicateurs de performance avancés (par exemple, pourcentage de vols non retardés, retards > 15 min, etc.), et génère des graphiques spécifiques à ces indicateurs.
- `main.py` : point d’entrée de l’application Dash, qui importe et assemble les différents layouts/pages.

4. Flux de données et interactions
----------------------------------

**Flux détaillé d'une session utilisateur**
1. L’utilisateur ouvre l’application Dash dans son navigateur. Un message indique le nombre de vols chargés et la date de dernière mise à jour.
2. Il sélectionne les filtres souhaités :
    - Flotte (ex : A320, B737, etc.)
    - Matricule (immatriculation de l’avion)
    - Code de retard (un ou plusieurs codes)
    - Dates de début et de fin d’analyse
    - Segmentation temporelle (ex : 7 jours)
3. Il clique sur le bouton « Analyser » :
    - Les données sont filtrées en temps réel selon les critères choisis.
    - Les tableaux et graphiques sont mis à jour instantanément.
4. Il consulte :
    - Les statistiques globales (nombre de codes, total de retards)
    - Le tableau de synthèse (avec tri, filtre, export CSV)
    - Le graphique d’évolution temporelle (barres groupées par période et par code)
5. Il peut modifier les filtres à tout moment pour explorer d’autres axes, ou exporter les résultats pour un rapport externe.
6. Si le fichier Excel source est modifié (par exemple, un nouvel export de données), l’application recharge automatiquement les données et met à jour tous les résultats.

**Exemple concret**
Un analyste qualité souhaite savoir quels sont les codes de retard les plus fréquents sur les vols A320 entre le 1er janvier et le 31 mars 2025. Il sélectionne la flotte « A320 », la période correspondante, et choisit une segmentation de 14 jours. Il obtient immédiatement :
- Un tableau listant chaque code de retard, le nombre d’occurrences, la description, la liste des aéroports concernés et le nombre d’aéroports distincts.
- Un graphique montrant l’évolution du pourcentage de chaque code sur chaque période de 14 jours.
- Les statistiques globales (nombre total de retards, top 5 des codes, etc.).

5. Points forts
---------------

**Performance et ergonomie**
- Rapidité d’exécution grâce à Polars (lazy evaluation, groupby, agrégations complexes en mémoire).
- Interface claire, moderne et responsive, adaptée à tous supports (grâce à Dash Bootstrap Components).
- Possibilité de surveiller automatiquement les changements de fichier source (rafraîchissement automatique sans intervention de l’utilisateur).
- Segmentation temporelle flexible (jours, semaines, mois, personnalisée selon la période analysée).
- Export facile des résultats (CSV, tableur) pour reporting ou analyse complémentaire.
- Modularité du code, facilitant l’ajout de nouvelles fonctionnalités ou l’adaptation à d’autres jeux de données.
- Visualisations interactives et personnalisables (zoom, survol, sélection de codes, info-bulles détaillées).

6. Limites et axes d’amélioration
---------------------------------

**Contraintes et points d’attention**
- Le format du fichier Excel doit être conforme (noms de colonnes attendus, types de données). Toute modification du format nécessite une adaptation du code.
- Les analyses sont centrées sur les codes de retard TEC (filtrage par `LIB_CODE_DR` = "TEC"). Les autres types de codes ne sont pas pris en compte dans la version actuelle.
- Pas de gestion multi-utilisateur ou d’authentification : l’application est prévue pour un usage local ou mono-utilisateur.
- Les visualisations sont limitées aux barres et tableaux (pas de cartes, heatmaps, etc. dans la version actuelle).
- Les tests unitaires et la documentation technique sont à renforcer pour faciliter la maintenance et l’évolution.
- Les messages d’erreur sont basiques et pourraient être améliorés pour une meilleure expérience utilisateur.
- L’intégration avec d’autres sources de données (API, bases de données) n’est pas prévue dans la version actuelle.

7. Conclusion
-------------

Conclusion
==========

Ce projet constitue une solution robuste, flexible et évolutive pour l’analyse des retards aériens à partir de données opérationnelles. Il se distingue par :
- Sa rapidité d’exécution, même sur de grands volumes de données, grâce à Polars
- Son interface moderne, intuitive et adaptée à tous les profils d’utilisateurs
- Sa capacité à fournir des analyses détaillées, personnalisées et exportables
- Son architecture modulaire, facilitant la maintenance et l’ajout de nouvelles fonctionnalités

L’application permet de :
- Réduire le temps d’analyse et de reporting pour les équipes qualité et opérations
- Améliorer la réactivité face aux problèmes de ponctualité
- Valoriser les données existantes en les rendant accessibles et exploitables par tous

Les perspectives d’évolution sont nombreuses :
- Intégration d’autres sources de données (par exemple, météo, trafic, incidents)
- Ajout de nouveaux indicateurs métiers (ponctualité par aéroport, analyse des causes racines, etc.)
- Automatisation de la génération de rapports périodiques (export CSV)
- Déploiement sur serveur pour accès multi-utilisateur
- Amélioration de la documentation, des tests et de la gestion des erreurs

En conclusion, ce projet s’inscrit dans une démarche d’amélioration continue et d’innovation au service de la performance opérationnelle. Il offre une base solide pour répondre aux enjeux actuels et futurs de la gestion des retards dans le transport aérien.

Pour toute question, suggestion ou contribution, il est recommandé de contacter l’équipe projet ou de consulter la documentation technique jointe.

