    # 2. Build temporal bar chart
    segmentation = store_data.get("segmentation") if store_data else None
    dt_start = store_data.get("dt_start", dt_min_iso) if store_data else dt_min_iso
    dt_end = store_data.get("dt_end", dt_max_iso) if store_data else dt_max_iso
    
    if df.is_empty():
        fig = go.Figure()
        fig.add_annotation(
            text="Aucun code de retard trouvé",
            xref="paper",
            yref="paper",
            x=0.5,
            y=0.5,
            showarrow=False,
            font=dict(size=20, color="#a0a7b9"),
        )
    else:
        # Get selected codes from store_data
        code_sel = store_data.get("code_sel") if store_data else None
        
        # Filter by selected codes if any
        if code_sel:
            df_chart = df.filter(pl.col("CODE_DR").is_in(code_sel))
        else:
            df_chart = df
        
        # Add time segments
        df_with_periods = create_time_segments(df_chart, dt_start, dt_end, segmentation)
        
        if df_with_periods.is_empty():
            fig = go.Figure()
            fig.add_annotation(
                text="Aucune donnée pour la période sélectionnée",
                xref="paper", yref="paper",
                x=0.5, y=0.5, showarrow=False,
                font=dict(size=16, color="#a0a7b9"),
            )
        else:
            # Group by time period and code
            temporal_data = (
                df_with_periods
                .group_by(["time_period", "CODE_DR"])
                .agg(pl.len().alias("count"))
                .sort(["time_period", "CODE_DR"])
            )
            
            # Get unique codes for color assignment
            unique_codes = temporal_data["CODE_DR"].unique().sort().to_list()
            
            # Create color palette
            import plotly.express as px
            colors = px.colors.qualitative.Set3
            color_map = {code: colors[i % len(colors)] for i, code in enumerate(unique_codes)}
            
            fig = go.Figure()
            
            # Add bars for each code
            for code in unique_codes:
                code_data = temporal_data.filter(pl.col("CODE_DR") == code)
                
                fig.add_trace(go.Bar(
                    x=code_data["time_period"].to_list(),
                    y=code_data["count"].to_list(),
                    name=code,
                    marker_color=color_map[code],
                    hovertemplate=f"<b>{code}</b><br>" +
                                "Période: %{x}<br>" +
                                "Nombre de retards: %{y}<br>" +
                                "<extra></extra>",
                ))

    fig.update_layout(
        template="plotly_white",
        height=600,
        margin=dict(l=50, r=20, t=40, b=40),
        xaxis_title="Période",
        yaxis_title="Nombre total de retards",
        title="Évolution des codes de retard par période",
        barmode="stack",
        font=dict(size=12),
        legend=dict(
            orientation="h",
            yanchor="bottom",
            y=1.02,
            xanchor="right",
            x=1
        ),
    )
EOF < /dev/null