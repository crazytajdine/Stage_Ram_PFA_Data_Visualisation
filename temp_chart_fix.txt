        # ALWAYS create time segments from full dataset to ensure consistent periods
        df_with_periods_full = create_time_segments(df, dt_start, dt_end, segmentation)
        
        # Get ALL possible time periods for consistent x-axis
        if df_with_periods_full.is_empty():
            all_periods = []
        else:
            all_periods = df_with_periods_full["time_period"].unique().sort().to_list()
        
        # Get selected codes from store_data
        code_sel = store_data.get("code_sel") if store_data else None
        
        # Filter by selected codes AFTER time segmentation
        if code_sel:
            df_chart = df_with_periods_full.filter(pl.col("CODE_DR").is_in(code_sel))
            selected_codes = code_sel
        else:
            df_chart = df_with_periods_full
            selected_codes = df_chart["CODE_DR"].unique().sort().to_list() if not df_chart.is_empty() else []
        
        if df_chart.is_empty() or not selected_codes:
            fig = go.Figure()
            fig.add_annotation(
                text="Aucune donnée pour les codes sélectionnés",
                xref="paper", yref="paper",
                x=0.5, y=0.5, showarrow=False,
                font=dict(size=16, color="#a0a7b9"),
            )
        else:
            # Group by time period and code
            temporal_data = (
                df_chart
                .group_by(["time_period", "CODE_DR"])
                .agg(pl.len().alias("count"))
                .sort(["time_period", "CODE_DR"])
            )
            
            # Create color palette for ALL unique codes (consistent colors)
            all_unique_codes = df["CODE_DR"].unique().sort().to_list() if not df.is_empty() else []
            colors = px.colors.qualitative.Set3
            color_map = {code: colors[i % len(colors)] for i, code in enumerate(all_unique_codes)}
            
            fig = go.Figure()
            
            # Add bars for each SELECTED code
            for code in selected_codes:
                code_data = temporal_data.filter(pl.col("CODE_DR") == code)
                
                # Ensure all periods are represented (fill missing with 0)
                periods_with_data = code_data["time_period"].to_list()
                counts_with_data = code_data["count"].to_list()
                
                # Create full data for all periods
                full_periods = []
                full_counts = []
                for period in all_periods:
                    if period in periods_with_data:
                        idx = periods_with_data.index(period)
                        full_counts.append(counts_with_data[idx])
                    else:
                        full_counts.append(0)
                    full_periods.append(period)
                
                fig.add_trace(go.Bar(
                    x=full_periods,
                    y=full_counts,
                    name=code,
                    marker_color=color_map.get(code, "#cccccc"),
                    hovertemplate=f"<b>{code}</b><br>" +
                                "Période: %{x}<br>" +
                                "Nombre de retards: %{y}<br>" +
                                "<extra></extra>",
                ))
EOF < /dev/null